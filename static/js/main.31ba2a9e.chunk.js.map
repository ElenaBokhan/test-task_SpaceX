{"version":3,"sources":["api/api.ts","store/LaunchPadsReducer.ts","store/RocketsReducer.ts","store/InitialReducer.ts","store/LaunchesReducer.ts","store/index.ts","components/LaunchesList.tsx","components/Launches.tsx","components/SelectFields.tsx","preloader/35.svg","App.tsx","index.tsx"],"names":["instance","axios","create","baseURL","API","param","get","then","res","data","initialState","dataAllLaunchPads","dataAllRockets","initialization","selectedLaunches","selectedField","setLaunchesAC","type","setSelectedFieldAC","field","rootReducer","combineReducers","LaunchesReducer","state","action","InitialReducer","LaunchPadsReducer","RocketsReducer","LaunchesList","map","el","index","className","src","links","mission_patch_small","height","alt","mission_name","launch_date_local","replace","split","reverse","join","details","connect","Launches","length","SelectFields","getRocketLaunchesThunk","getPadLaunchesThunk","defaultValue","onChange","e","target","value","disabled","hidden","site_id","site_name_long","placeholder","rocket_name","dispatch","a","response","console","log","App","this","props","initThunkCreator","initStatus","preloader","React","Component","promiseLaunchPads","promiseRockets","Promise","all","store","createStore","applyMiddleware","ReduxThunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.31ba2a9e.chunk.js","sourcesContent":["import { LaunchPadType, RocketType } from './../type/type';\r\nimport { launchType } from '../type/type';\r\nimport axios from \"axios\";\r\n\r\nlet instance = axios.create({\r\n  baseURL: \"https://api.spacexdata.com/v3\",\r\n});\r\ntype responseLaunches = Array<launchType>;\r\ntype responseLaunchPads = Array<LaunchPadType>\r\ntype responseRocket = Array<RocketType>\r\n\r\nexport const API = {\r\n    getRocketLaunches(param: string){\r\n      return instance.get<responseLaunches>(`/launches?rocket_name=${param}`).then(res => res.data)\r\n    },\r\n    getPadLaunches(param:string){\r\n      return instance.get<responseLaunches>(`/launches?site_id=${param}`).then(res => res.data)\r\n    },\r\n    getAllLaunchPads(){\r\n      return instance.get<responseLaunchPads>(\"launchpads\").then(res => res.data)\r\n    },\r\n    getAllRocket(){\r\n      return instance.get<responseRocket>(\"rockets\").then(res => res.data)\r\n    } \r\n}","import { LaunchPadType } from './../type/type';\r\nimport { AppStateType } from './index';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { API } from \"../api/api\";\r\n\r\nconst SET_ALL_LAUNCHPADS = \"SET-ALL-LAUNCHPADS\";\r\n\r\nconst initialState = {\r\n    dataAllLaunchPads: [] as Array<LaunchPadType>,\t\t\r\n}\r\ntype initialStateType = typeof initialState;\r\n\r\nexport const LaunchPadsReducer = (state = initialState, action: ActionType): initialStateType => {\r\n    switch (action.type){\r\n        case \"SET-ALL-LAUNCHPADS\":\r\n            return { ...state,\r\n                dataAllLaunchPads: [...action.data],\r\n            }\r\n        default:\r\n             return state;\r\n    }        \r\n}\r\ntype ActionType = setAllLaunchPadsActionType\r\ntype setAllLaunchPadsActionType = {\r\n    type: typeof SET_ALL_LAUNCHPADS\r\n    data: Array<LaunchPadType>\r\n}\r\nexport const setAllLaunchPadsAC = (data: Array<LaunchPadType>): setAllLaunchPadsActionType => ({type: SET_ALL_LAUNCHPADS, data})\r\n\r\nexport const getAllLaunchPadsThunk = ():ThunkAction<void, AppStateType, unknown, ActionType> => async dispatch => {\r\n    const response = await API.getAllLaunchPads();\r\n    try {        \r\n        dispatch(setAllLaunchPadsAC(response))\r\n    } \r\n    catch(e) {\r\n        console.log(e)\r\n    }    \r\n}","import { RocketType } from './../type/type';\r\nimport { AppStateType } from './index';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { API } from \"../api/api\";\r\n\r\nconst SET_ALL_ROCKETS = \"SET-ALL-ROCKETS\";\r\n\r\nconst initialState = {\r\n    dataAllRockets: [] as Array<RocketType>,\t\t\r\n}\r\ntype initialStateType = typeof initialState;\r\nexport const RocketsReducer = (state = initialState, action: ActionType): initialStateType => {\r\n    switch (action.type){\r\n        case \"SET-ALL-ROCKETS\":\r\n            return { ...state,\r\n                dataAllRockets: [...action.data],\r\n            }\r\n        default:\r\n             return state;\r\n    }        \r\n}\r\ntype ActionType = setAllRocketsActionType\r\n\r\ntype setAllRocketsActionType = {\r\n    type: typeof SET_ALL_ROCKETS,\r\n    data: Array<RocketType>\r\n}\r\nexport const setAllRocketsAC = (data: Array<RocketType>): setAllRocketsActionType => ({type: SET_ALL_ROCKETS, data})\r\n\r\nexport const getAllRocketsThunk = (): ThunkAction<void, AppStateType, unknown, ActionType> => async dispatch => {\r\n    const response = await API.getAllRocket();\r\n    try {\r\n        dispatch(setAllRocketsAC(response))\r\n    } \r\n    catch(e) {\r\n        console.log(e)\r\n    }    \r\n}","import { AppStateType } from './index';\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { getAllLaunchPadsThunk } from \"./LaunchPadsReducer\";\r\nimport { getAllRocketsThunk } from \"./RocketsReducer\";\r\n\r\nconst INITIAL_APP = \"INITIAL-APP\";\r\n\r\nconst initialState = {\r\n    initialization: false,\t\t\r\n}\r\ntype initialStateType = typeof initialState;\r\n\r\nexport const InitialReducer = (state = initialState, action: ActionType): initialStateType => {\r\n    switch (action.type){\r\n        case \"INITIAL-APP\":\r\n            return { ...state,\r\n                initialization: true\r\n            }\r\n        default:\r\n             return state;\r\n    }        \r\n}\r\ntype ActionType = initialAppActionType\r\ntype initialAppActionType = {\r\n\ttype: typeof INITIAL_APP\r\n}\r\nexport const initialAppAC = ():initialAppActionType  => ({type: INITIAL_APP})\r\n\r\nexport const initThunkCreator = ():ThunkAction<void, AppStateType, unknown, ActionType> => async dispatch => {\r\n\t\r\n    let promiseLaunchPads = dispatch(getAllLaunchPadsThunk());\r\n    let promiseRockets = dispatch(getAllRocketsThunk());\r\n    \r\n    Promise.all([promiseLaunchPads, promiseRockets])\r\n           .then(()=> dispatch(initialAppAC()))           \r\n};","import { launchType } from './../type/type';\r\nimport { AppStateType } from './index';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { API } from \"../api/api\";\r\n\r\nconst SET_LAUNCHES = \"SET-LAUNCHES\";\r\nconst SET_SELECTED_FIELD = \"SET-SELECTED-FIELD\";\r\n\r\nconst initialState = {    \r\n    selectedLaunches: [] as Array<launchType>,\r\n    selectedField: null\tas string | null\t\r\n}\r\ntype initialStateType = typeof initialState;\r\n\r\nexport const LaunchesReducer = (state = initialState, action: ActionType): initialStateType => {\r\n    switch (action.type){\r\n        case \"SET-LAUNCHES\":\r\n            return { ...state,\r\n                selectedLaunches: [...action.data],\r\n            }  \r\n        case \"SET-SELECTED-FIELD\":\r\n            return { ...state,\r\n                selectedField: action.field,\r\n            }       \r\n        default:\r\n            return state;\r\n    }        \r\n}\r\ntype ActionType = setLaunchesActionType | setSelectedFieldActionType\r\ntype setLaunchesActionType = {\r\n    type: typeof SET_LAUNCHES\r\n    data: Array<launchType>\r\n}\r\nexport const setLaunchesAC = (data: Array<launchType>): setLaunchesActionType => ({type: SET_LAUNCHES, data})\r\ntype setSelectedFieldActionType = {\r\n    type: typeof SET_SELECTED_FIELD\r\n    field: string\r\n}\r\nexport const setSelectedFieldAC = (field: string): setSelectedFieldActionType => ({type: SET_SELECTED_FIELD,field})\r\n\r\nexport const getRocketLaunchesThunk = (param: string):ThunkAction<void, AppStateType, unknown, ActionType> => async dispatch => {\r\n    const response = await API.getRocketLaunches(param)\r\n    try {\r\n        dispatch(setLaunchesAC(response))\r\n        dispatch(setSelectedFieldAC(\"rocket\"))\r\n    } \r\n    catch(e) {\r\n        console.log(e)\r\n    }    \r\n}\r\nexport const getPadLaunchesThunk = (param: string):ThunkAction<void, AppStateType, unknown, ActionType> => async dispatch => {\r\n    const response = await API.getPadLaunches(param)\r\n    try {\r\n        dispatch(setLaunchesAC(response))\r\n        dispatch(setSelectedFieldAC(\"pad\"))\r\n    } \r\n    catch(e) {\r\n        console.log(e)\r\n    }    \r\n}\r\n","import { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport ReduxThunk from \"redux-thunk\";\r\nimport { InitialReducer } from \"./InitialReducer\";\r\nimport { LaunchesReducer } from \"./LaunchesReducer\";\r\nimport { LaunchPadsReducer } from \"./LaunchPadsReducer\";\r\nimport { RocketsReducer } from \"./RocketsReducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n   LaunchesReducer,\r\n   InitialReducer,\r\n   LaunchPadsReducer,\r\n   RocketsReducer\r\n})\r\n\r\ntype rootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<rootReducerType>\r\n\r\nexport function initStore() {\r\n    const initialStore = {};\r\n    return createStore(rootReducer, initialStore, applyMiddleware(ReduxThunk))\r\n}","import { connect } from \"react-redux\";\r\nimport React from \"react\";\r\nimport { AppStateType } from \"../store\";\r\nimport { launchType } from \"../type/type\";\r\n\r\nlet LaunchesList: React.FC<mapStatePropsType> = ({selectedLaunches}) => {\r\n\r\n    return  <>\r\n            {selectedLaunches.map((el, index) => { \r\n                return <div className = \"launches-item\" key = { index }>\r\n                            <img src = { el.links.mission_patch_small }                        \r\n                                 height = \"120px\" \r\n                                 alt = \"patch\"/>\r\n                            <h4>{ el.mission_name }</h4>\r\n                            <time>{ el.launch_date_local.replace(/T.*/,\"\").split('-').reverse().join('.') }</time>\r\n                            <p className = \"details\">{ el.details }</p>\r\n                        </div>})}\r\n            </>               \r\n                        \r\n}\r\ntype mapStatePropsType = {\r\n    selectedLaunches: Array<launchType>\r\n}\r\nconst mapStateToProps = (state: AppStateType): mapStatePropsType => ({\r\n\tselectedLaunches: state.LaunchesReducer.selectedLaunches,\t\r\n})\r\n\r\nexport default LaunchesList = connect<mapStatePropsType, {}, {}, AppStateType>(mapStateToProps, {})(LaunchesList)","import { connect } from \"react-redux\";\r\nimport LaunchesList from \"./LaunchesList\";\r\nimport React from \"react\";\r\nimport { AppStateType } from \"../store\";\r\nimport { launchType } from \"../type/type\";\r\n\r\nlet Launches: React.FC<mapStatePropsType> = ({ selectedLaunches, selectedField }) => {\r\n\r\n    return <>\r\n            { selectedLaunches.length === 0 && selectedField === \"pad\"\r\n            ? <p className = \"noResult\">There were no successful launches from this site</p>\r\n            : selectedLaunches.length === 0 && selectedField === \"rocket\"\r\n            ? <p className = \"noResult\">There were no successful launches with this rocket</p>\r\n            : <LaunchesList />}\r\n           </>\r\n}\r\ntype mapStatePropsType = {\r\n    selectedLaunches: Array<launchType>,\t\r\n    selectedField: string | null,\r\n}\r\nconst mapStateToProps = (state: AppStateType): mapStatePropsType  => ({\r\n    selectedLaunches: state.LaunchesReducer.selectedLaunches,\t\r\n    selectedField: state.LaunchesReducer.selectedField,\r\n})\r\n\r\nexport default Launches = connect<mapStatePropsType, {}, {}, AppStateType>(mapStateToProps, {})(Launches)\r\n\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { AppStateType } from \"../store\";\r\nimport { getRocketLaunchesThunk, getPadLaunchesThunk } from '../store/LaunchesReducer';\r\nimport { LaunchPadType, RocketType } from \"../type/type\";\r\n\r\nlet SelectFields: React.FC<mapStatePropsType & mapDispatchPropsType> = ({ getRocketLaunchesThunk, getPadLaunchesThunk, dataAllLaunchPads, dataAllRockets }) => {\r\n\r\n    return  <section className = \"select-bar\">\r\n                <div className = \"select-bar-item\">\r\n                    <p>Launch Pads</p> \r\n                    <select defaultValue=\"\" \r\n                            onChange = { (e) => getPadLaunchesThunk(e.target.value) }>\r\n                        <option value = \"\" disabled hidden>Select pad</option>\r\n                        {dataAllLaunchPads.map((el, index) => {\r\n                            return  <option value = { el.site_id } \r\n                                            key = { index }>{ el.site_name_long }\r\n                                    </option>})}\r\n                    </select>        \r\n                </div>\r\n                <div className = \"select-bar-item\">\r\n                    <p>Rockets</p>\r\n                    <select defaultValue=\"\" \r\n                            onChange = { (e) => getRocketLaunchesThunk(e.target.value) } \r\n                            placeholder = \"select rocket\">\r\n                        <option  value = \"\" disabled hidden>Select rocket</option>\r\n                        {dataAllRockets.map((el, index) => {\r\n                            return  <option value = {el.rocket_name} \r\n                                            key = { index } >{ el.rocket_name }\r\n                                    </option>})}\r\n                    </select>          \r\n                </div>       \r\n            </section>\r\n}\r\ntype mapStatePropsType = {\r\n    dataAllLaunchPads: Array<LaunchPadType>\r\n\tdataAllRockets: Array<RocketType>\r\n}\r\ntype mapDispatchPropsType = {\r\n    getRocketLaunchesThunk: (name: string) => void\r\n    getPadLaunchesThunk: (name: string) => void\r\n}\r\nconst mapStateToProps = (state: AppStateType): mapStatePropsType => ({\r\n    dataAllLaunchPads: state.LaunchPadsReducer.dataAllLaunchPads,\t\r\n\tdataAllRockets: state.RocketsReducer.dataAllRockets,\r\n})\r\n\r\n\r\nexport default SelectFields = connect<mapStatePropsType, mapDispatchPropsType, {}, AppStateType>(mapStateToProps, { getRocketLaunchesThunk, getPadLaunchesThunk })(SelectFields)\r\n\r\n","export default __webpack_public_path__ + \"static/media/35.b8d4e11a.svg\";","import './App.css';\r\nimport React from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { initThunkCreator } from './store/InitialReducer';\r\nimport Launches from './components/Launches';\r\nimport SelectFields from './components/SelectFields';\r\nimport preloader from './preloader/35.svg'\r\nimport { AppStateType } from './store';\r\n\r\n\r\nclass App extends React.Component<mapStatePropsType & mapDispatchPropsType>{\r\n\tcomponentDidMount(){   \r\n\t\tthis.props.initThunkCreator()\t\t\r\n\t}\t\r\n\trender(){\r\n\t\treturn \t<div className = \"container\">\r\n\t\t\t\t\t<h1>Launches</h1>\r\n\t\t\t\t\t{!this.props.initStatus ? <img src= { preloader } \r\n\t\t\t\t\t\t\t\t\t\t\t\t   className = \"preloader\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t   alt = \"preloader\"/>\r\n\t\t\t\t\t\t\t\t\t\t\t: <><SelectFields />\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Launches />\r\n\t\t\t\t\t\t\t\t\t\t\t  </>}\t\t\t\r\n\t\t\t\t</div>\t\t\r\n\t}\r\n}\r\ntype mapStatePropsType = {\r\n    initStatus: boolean    \r\n}\r\ntype mapDispatchPropsType = {\r\n    initThunkCreator: () => void   \r\n}\r\nconst mapStateToProps = (state: AppStateType): mapStatePropsType => ({\r\n    initStatus: state.InitialReducer.initialization\t\r\n})\r\nexport default connect<mapStatePropsType, mapDispatchPropsType, {}, AppStateType>(mapStateToProps, { initThunkCreator })(App)","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { initStore } from './store';\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\n\r\nconst store = initStore();\r\n\r\nReactDOM.render(\r\n\t<Provider store = { store }>\t\t\r\n\t\t<App />\r\n  \t</Provider>,  \r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}